Data<-read.table("MIMS.data_MarchApril2019.txt",sep=",",header=T,na.strings="NA")
ls(Data)


Data$Day<-as.POSIXct(Data$acutal_day, format = "%Y-%m-%d %H:%M:%S")
###################################################################
#Prep stuff to get 5 minute averages and data all paired up

Data1<-Data[complete.cases(Data$O2),]

dim(Data1)

Data1<-Data1[4:69687,] #This allows cut time to match up to the more periodic SCCOOS measurements

#To see what cut does:
cut(Data1$Day, breaks="5 min")

#Applying cut:
Oxygenmeans <- aggregate(Data1["O2"], 
                   list(fiveMin=cut(Data1$Day, "5 mins")),
                   mean)

Argonmeans <- aggregate(Data1["Ar"], 
                         list(fiveMin=cut(Data1$Day, "5 mins")),
                         mean)


Watermeans <- aggregate(Data1["H2O"],
                          list(fiveMin=cut(Data1$Day, "5 mins")),
                          mean)


DMSmeans <- aggregate(Data1["DMS"],
                          list(fiveMin=cut(Data1$Day, "5 mins")),
                          mean)


#O2Armeans <- aggregate(Data1["O2Ar"],
#                               list(fiveMin=cut(Data1$Day, "5 mins")),
#                               mean)


#TempMIMSmeans <- aggregate(Data1["Temp"], 
#                        list(fiveMin=cut(Data1$Day, "5 mins")),
#                        mean)


#Import temp and salnity (note: have to have minute of first time match the minute of the MIMs file so that 5 minute match up can work)
#HAVE TO PUT SCCOOS DATE INTO PST

SCCOOS<-read.csv("SCCOOS_March_April_May.csv",header=T,na.strings="NA")

UTCtime<-as.POSIXct(SCCOOS$Time..UTC., tz="UTC")
SCCOOS$timePST<-format(UTCtime, tz="America/Los_Angeles", usetz=TRUE)

SCCOOS$timePST <- as.POSIXct(SCCOOS$timePST, format="%Y-%m-%d %H:%M")

SCCOOS2 <- data.frame("timePST"=c(SCCOOS$timePST),"pressure"=c(SCCOOS$pressure..dbar.),"temperature"=c(SCCOOS$temperature..celsius.),"chlorophyll"=c(SCCOOS$chlorophyll..ug.L.),"chlorophyll.flag"=c(SCCOOS$temperature_flagPrimary),"salinity"=c(SCCOOS$salinity..1e.3.))

plot(SCCOOS2$chlorophyll)

#FIGURE OUT HOW TO REMOVE CHL WHEN FLAG IS BAD or if value is above something else

library("zoo")
SCCOOS.zoo <- zoo(SCCOOS2[,-1],SCCOOS2[,1])


SCCOOS2 <- merge(SCCOOS.zoo, zoo(,seq(start(SCCOOS.zoo), end(SCCOOS.zoo), by="min")), all=TRUE)

SCCOOS2 <- as.data.frame(SCCOOS2)

SCCOOS2$pressure <- na.spline(SCCOOS2$pressure)
SCCOOS2$temperature <- na.spline(SCCOOS2$temperature)
SCCOOS2$chlorophyll <- na.spline(SCCOOS2$chlorophyll)
SCCOOS2$salinity <- na.spline(SCCOOS2$salinity)
SCCOOS2$timePST <- rownames(SCCOOS2)
SCCOOS2$timePST <- as.POSIXct(SCCOOS2$timePST, format="%Y-%m-%d %H:%M")

SCCOOS2<-SCCOOS2[1:length(SCCOOS2$timePST),]

#Import wind

Wind <- read.csv("WindSpeed2019_Hourly.csv",header=T,na.strings="NA")

GMTtime <- as.POSIXct(Wind$Date, tz="GMT", format = "%m/%d/%Y %H:%M")

Wind$timePST<-format(GMTtime, tz="America/Los_Angeles", usetz=TRUE)

Wind$timePST <- as.POSIXct(Wind$timePST, format="%Y-%m-%d %H:%M")

#Wind<-Wind[1:9987,]

Wind2 <- data.frame("TimePST"=c(Wind$timePST),"WSPD"=c(Wind$WSPD),"WDIR"=c(Wind$WDIR))

Wind.zoo <- zoo(Wind2[,-1],Wind2[,1])

Wind2 <- merge(Wind.zoo, zoo(,seq(start(Wind.zoo), end(Wind.zoo), by="min")), all=TRUE)

Wind2 <- as.data.frame(Wind2)

Wind2$WDIR <- na.spline(Wind2$WDIR)
Wind2$WSPD <- na.spline(Wind2$WSPD)
Wind2$timePST <- rownames(Wind2)
Wind2$timePST <- as.POSIXct(Wind2$timePST, format="%Y-%m-%d %H:%M")

Wind2<-Wind2[122023:length(Wind2$timePST),]

#Average of 5 mins

Tempmeans <- aggregate(SCCOOS2["temperature"], 
                         list(fiveMin=cut(SCCOOS2$timePST, "5 mins")),
                         mean)

Salinitymeans <- aggregate(SCCOOS2["salinity"], 
                        list(fiveMin=cut(SCCOOS2$timePST, "5 mins")),
                        mean)

Chlorophyllmeans <- aggregate(SCCOOS2["chlorophyll"],
                        list(fiveMin=cut(SCCOOS2$timePST, "5 mins")),
                        mean)

Pressuremeans <- aggregate(SCCOOS2["pressure"],
                        list(fiveMin=cut(SCCOOS2$timePST, "5 mins")),
                        mean)

Windspeedmeans <- aggregate(Wind2["WSPD"],
                        list(fiveMin=cut(Wind2$timePST, "5 mins")),
                        mean)




#Merge SCCOOS with Data data.frame

Everything<-merge(Salinitymeans,Tempmeans,by="fiveMin",all=TRUE)
Everything2<-merge(Everything,Argonmeans,by="fiveMin",all=TRUE)
Everything3<-merge(Everything2,Oxygenmeans,by="fiveMin",all=TRUE)
#Everything4<-merge(Everything3,O2Armeans,by="fiveMin",all=TRUE)
Everything5<-merge(Everything3,Watermeans,by="fiveMin",all=TRUE)
Everything6<-merge(Everything5,Windspeedmeans,by="fiveMin",all=TRUE) #In m/s
Everything7<-merge(Everything6,Chlorophyllmeans,by="fiveMin",all=TRUE)
Everything8<-merge(Everything7,DMSmeans,by="fiveMin",all=TRUE)
Everything9<-merge(Everything8,Pressuremeans,by="fiveMin",all=TRUE)

Everything10<-Everything9[complete.cases(Everything9$O2),]


#This comes from Garcia and Gordon (1992)
Everything10$TS <- log((298.15-Everything10$temperature)/(273.15+Everything10$temperature))

AverageWater <- mean(na.omit(Everything10$H2O))
Everything10$WaterCorrection <- AverageWater/Everything10$H2O

Everything10$ArgonCorr <- Everything10$Ar/Everything10$WaterCorrection

Everything10$OxygenCorr <- Everything10$O2/Everything10$WaterCorrection

ls(Everything10)


#Calculate Oxygen at Saturation (These saturations come from Hamme and Emerson 2004 and Garcia and Gordon 1992):

#Don't need to actually calculate ArSat, but this is here if interested
#ArSat <- 2.71828^(2.79150 + 3.17609*(Everything31$TS) + 4.13116*(Everything31$TS^2) + 4.90379*(Everything31$TS^3) + Everything31$salinity*(-0.00696233 + -0.00766670*(Everything31$TS) - 0.0116888*(Everything31$TS^2)))

O2Sat <- 2.71828^(5.80871 + 3.20291*(Everything10$TS) + 4.17887*(Everything10$TS^2) + 5.10006*(Everything10$TS^2) + 5.10006*(Everything10$TS^3) -0.0986643*(Everything10$TS^4) + 3.80369*(Everything10$TS^5) + Everything10$salinity*(-0.00701577 - 0.00770028*(Everything10$TS) - 0.0113864*(Everything10$TS^2) - 0.00951519*(Everything10$TS^3)) - 0.000000275915*(Everything10$salinity^2))
#Units for ArSat and O2Sat are in umol/kg or mmol/m3


#Figuring out Oxygen and Argon concentraions relative to what it would be at 100% (based on 100% calibrations conducted periodically--using oxygen and argon saturated water)
#This keeps oxygen and argon in voltage but divides out the units so you just have a ratio
Everything10$OxygenConcRatio <- Everything10$OxygenCorr/(3.37787878048781*10^-8)

Everything10$ArgonConcRatio <- Everything10$ArgonCorr/(2.63060634146341*10^-9)

#Convert Wind speed (m/s) to 10m above sea surface using Donelan 1990

ActualHeightToSurface=17.5 #This refelcts Station LJAC1-9410230-La Jolla, CA (8.2m above site elevation and site elevation 9.3m above mean sea level)

U10<-Everything10$WSPD*(1+(((1.3*(10^-3))^0.5)/0.4)*log(10/(ActualHeightToSurface)))


#Estimate depth of the pump (it is approximately 5m down but that changes with tide, which can be tracked by the pressure sensor which is at a slightly different depth)

Depth <- 5*(Everything10$pressure/mean(na.omit(Everything10$pressure)))
#Units are in m


#Have to calculate gas transfer velocity (aka gas transfer coefficient or piston velocity) for CO2 (k660)--There are many different equations for this but used McGillis et al. (2001) as it covered a wide range of windspeeds and does not take k to zero at low wind speeds (See Wanninkhof et al. 2009)
#K units are cm/hr and U10 units are in m/s

K660<-3.3+0.026*((U10)^3) #McGillis 2001

K660_2<-0.31*(U10^2) #Wanninkhof 1992

K660_3<-0.333*U10+0.222*(U10^2) #Nightengale et al. 2000

#Calculate Schmidt number (the kiematic viscosity of water divided by the diffusion coefficient of the gas--a dimensionless number) for O2 in seawater (Wanninkhof 1992)
#T=Temp in degress Celsius

ScO2<-1953.4-128*Everything10$temperature+3.9918*(Everything10$temperature^2)-0.050091*(Everything10$temperature^3)

#Convert K660 to KO2 using ScO2 and 660 (the Schmitt number for CO2 in seawter)

FUNK660<-function(U10){if(U10<1.9999999999){2/3}else{1/2}}

number<-sapply(U10, FUNK660)

KO2<-((ScO2/660)^(-1*number))*K660 #Units are cm/hr so will have to change to m/min probably
KO2_2<-((ScO2/660)^(-1*number))*K660_2 #Units are cm/hr so will have to change to m/min probably
KO2_3<-((ScO2/660)^(-1*number))*K660_3 #Units are cm/hr so will have to change to m/min probably


KO2mpermin<-KO2/(60*100) #Units are now in m/min
KO2mpermin_2<-KO2_2/(60*100) #Units are now in m/min
KO2mpermin_3<-KO2_3/(60*100) #Units are now in m/min

##############################################################################
#Non-Steady State Estimation of NCP

#Calcuate Biological Oxygen Saturation

DeltaO2Ar <- (Everything10$OxygenConcRatio/Everything10$ArgonConcRatio-1)
#unitless


O2Bio <- DeltaO2Ar*O2Sat
#In mmol/m3


#NCP
library("dplyr")

NCPpermin_NonSteadyState <- Depth*(lead(O2Bio,n=1L)-O2Bio)/5 + KO2mpermin*(lead(O2Bio,n=1L))
NCPpermin_NonSteadyState_2 <- Depth*(lead(O2Bio,n=1L)-O2Bio)/5 + KO2mpermin_2*(lead(O2Bio,n=1L))
NCPpermin_NonSteadyState_3 <- Depth*(lead(O2Bio,n=1L)-O2Bio)/5 + KO2mpermin_3*(lead(O2Bio,n=1L))


#Units in mmol/m2/min

NCPpermin_NonSteadyState.splined <- na.spline(NCPpermin_NonSteadyState)

NCPpermin_NonSteadyState_smoothed <- smooth(NCPpermin_NonSteadyState.splined)


#Calculate moving average with window 144 (12 hours) and make first and last value as NA (to ensure identical length of vectors)
m.av<-rollmean(NCPpermin_NonSteadyState, 144, fill = list(NA, NULL, NA))
m.av_2<-rollmean(NCPpermin_NonSteadyState_2, 144, fill = list(NA, NULL, NA))
m.av_3<-rollmean(NCPpermin_NonSteadyState_3, 144, fill = list(NA, NULL, NA))

#Making some files

fivemin_means_and_NCP_NonSteadyState <- cbind(Everything10,NCPpermin_NonSteadyState,NCPpermin_NonSteadyState_2,NCPpermin_NonSteadyState_3,m.av,m.av_2,m.av_3)

#write.csv(fivemin_means_and_NCP_NonSteadyState, "fivemin_means_and_NCP_NonSteadyState_MarchApril2019_units_mmolperm2permin.csv")


#############################################################

#Some plots

NCPTimes<-as.Date(fivemin_means_and_NCP_NonSteadyState$fiveMin, format = "%Y-%m-%d")

line.segments <- seq(from = 156, to = 8664, by = 288)

plot(fivemin_means_and_NCP_NonSteadyState$NCPpermin_NonSteadyState, col="blue", yaxt="n", xaxt="n", xlab="", ylab="", ylim = c(-10,10))
axis(2,cex.axis=1.5)
mtext(side=2, line=3, "NCP, mmol/m2/min", font = 2, cex=1.5)
abline(v=c(line.segments), col = 'black')
points(m.av,type='l', col = 'red')

plot(fivemin_means_and_NCP_NonSteadyState$NCPpermin_NonSteadyState, col="blue", yaxt="n", xaxt="n", xlab="", ylab="", ylim = c(-3,3))
axis(2,cex.axis=1.5)
mtext(side=2, line=3, "NCP, mmol/m2/min", font = 2, cex=1.5)
abline(v=c(line.segments), col = 'black')
points(m.av,type='l', col = 'red')


plot(fivemin_means_and_NCP_NonSteadyState$NCPpermin_NonSteadyState_2, col="blue", yaxt="n", xaxt="n", xlab="", ylab="", ylim = c(-10,10))
axis(2,cex.axis=1.5)
mtext(side=2, line=3, "NCP, mmol/m2/min", font = 2, cex=1.5)
abline(v=c(line.segments), col = 'black')
points(m.av_2,type='l', col = 'red')

plot(fivemin_means_and_NCP_NonSteadyState$NCPpermin_NonSteadyState_2, col="blue", yaxt="n", xaxt="n", xlab="", ylab="", ylim = c(-3,3))
axis(2,cex.axis=1.5)
mtext(side=2, line=3, "NCP, mmol/m2/min", font = 2, cex=1.5)
abline(v=c(line.segments), col = 'black')
points(m.av_2,type='l', col = 'red')


plot(fivemin_means_and_NCP_NonSteadyState$NCPpermin_NonSteadyState_3, col="blue", yaxt="n", xaxt="n", xlab="", ylab="", ylim = c(-10,10))
axis(2,cex.axis=1.5)
mtext(side=2, line=3, "NCP, mmol/m2/min", font = 2, cex=1.5)
abline(v=c(line.segments), col = 'black')
points(m.av_3,type='l', col = 'red')

plot(fivemin_means_and_NCP_NonSteadyState$NCPpermin_NonSteadyState_3, col="blue", yaxt="n", xaxt="n", xlab="", ylab="", ylim = c(-3,3))
axis(2,cex.axis=1.5)
mtext(side=2, line=3, "NCP, mmol/m2/min", font = 2, cex=1.5)
abline(v=c(line.segments), col = 'black')
points(m.av_3,type='l', col = 'red')


###Note: Should think about inserting NAs when no data a regular intervals before completeing moving average
